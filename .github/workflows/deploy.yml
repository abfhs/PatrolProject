name: Deploy to AWS App Runner

on:
  push:
    branches:
      - master

env:
  AWS_REGION: ap-northeast-2
  ECR_REPOSITORY: patrol
  APP_RUNNER_SERVICE_NAME: patrol-service

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "IMAGE_URI=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_ENV

      - name: Check for existing App Runner service
        id: check-service
        run: |
          SERVICE_ARN=$(aws apprunner list-services --query "ServiceSummaryList[?ServiceName=='${{ env.APP_RUNNER_SERVICE_NAME }}'].ServiceArn" --output text)
          if [ -z "$SERVICE_ARN" ]; then
            echo "Service does not exist. It will be created."
            echo "exists=false" >> $GITHUB_OUTPUT
          else
            echo "Service exists. ARN: $SERVICE_ARN"
            echo "exists=true" >> $GITHUB_OUTPUT
            echo "arn=$SERVICE_ARN" >> $GITHUB_OUTPUT
          fi

      - name: Create App Runner Service
        if: steps.check-service.outputs.exists == 'false'
        run: |
          aws apprunner create-service --service-name ${{ env.APP_RUNNER_SERVICE_NAME }} \
          --source-configuration '{
            "ImageRepository": {
              "ImageIdentifier": "${{ env.IMAGE_URI }}",
              "ImageRepositoryType": "ECR",
              "ImageConfiguration": { "Port": "3000" }
            }
          }' \
          --instance-configuration '{
            "Cpu": "1 vCPU", 
            "Memory": "2 GB"
          }' 

      - name: Deploy to existing App Runner Service
        if: steps.check-service.outputs.exists == 'true'
        run: |
          aws apprunner start-deployment --service-arn ${{ steps.check-service.outputs.arn }}